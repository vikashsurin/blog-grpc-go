admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 8000 }
      listener_filters:
        - name: "envoy.filters.listener.tls_inspector"
          typed_config: {}
        - name: envoy.filters.listener.proxy_protocol
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
      filter_chains:
        - filter_chain_match:
            server_names: ["example.com", "www.example.com"]
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      { filename: "envoy/x509/server_cert.pem" }
                    private_key: { filename: "envoy/x509/server_key.pem" }
        # alpn_protocols:["h2, http/1.1"]
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: go_backend
                            timeout: 0s
                      transport_socket:
                        name: envoy.transport_sockets.tls
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                          common_tls_context:
                            tls_certificates:
                              - certificate_chain:
                                  { filename: "envoy/x509/server_cert.pem" }
                                private_key:
                                  { filename: "envoy/x509/server_key.pem" }
                            validation_context:
                              trusted_ca:
                                filename: envoy/x509/ca_cert.pem
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET,PUT,DELETE,POST,OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,access-token,authorization
                        max_age: "1728000"
                        expose_headers: custom-header-1,grpc-status,grpc-message,access-token,authorization
                        allow_credentials: true
                http_filters:
                  - name: envoy.filters.http.grpc_http1_bridge
                    typed_config: {}
                  - name: envoy.filters.http.grpc_web
                    typed_config: {}
                  - name: envoy.filters.http.cors
                    typed_config: {}
                  - name: envoy.filters.http.router
                    typed_config: {}
  clusters:
    - name: go_backend
      connect_timeout: 1s
      type: logical_dns
      dns_lookup_family: V4_ONLY
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: go_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 0.0.0.0
                      port_value: 8080
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                exact: "*.test.example.com"
              trusted_ca:
                filename: x509/ca_cert.pem
          sni: test.example.com
          allow_renegotiation: true

  # Force HTTP/2
  # Your grpc server communicates over TLS. You must configure the transport
  # socket. If you care about the overhead, you should configure the grpc
  # server to listen without TLS. If you need to listen to grpc-web and grpc
  # over HTTP/2 both you can also proxy your TCP traffic with the envoy.
  # transport_socket:
  #   name: envoy.transport_sockets.tls
  #   typed_config:
  #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
